#lang scheme

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) 
                                           var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (install-sum-deriv-package)
  (define (make-sum a1 . a2)
    (append (list '+ a1) a2))
  (define (addend s) (cadr s))
  (define (augend s)
    (if (> (length (cddr s)) 1)
        (append (list '+) (cddr s))
        (caddr s)))
  (define (deriv exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (define (tag x) (attach-tag 'sum x))
  (put 'make-sum '(sum) make-sum)
  (put 'addend '(sum) addend)
  (put 'augend '(sum) augend)
  (put 'deriv '(sum) deriv)
  'done)

(define (install-product-deriv-package)
  (define (make-product a1 . a2)
    (append (list '* a1) a2))
  (define (multiplier s) (cadr s))
  (define (multiplicand s)
    (if (> (length (cddr s)) 1)
        (append (list'*) (cddr s))
        (caddr s)))
  (define (deriv exp var)
    (make-sum
     (make-product (multiplier exp)
                   (deriv (multiplicand exp) var))
     (make-product (deriv (multiplier exp) var)
                   (multiplicand exp))))

  (define (tag x) (attach-tag 'product x))
  (put 'make-product '(product) make-product)
  (put 'multiplier '(product) multiplier)
  (put 'multiplicand '(product) multiplicand)
  (put 'deriv '(product) deriv)
  'done)

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? exp num)
  (and (number? exp) (= exp num)))
